apiVersion: platform.confluent.io/v1beta1
kind: Zookeeper
metadata:
  name: zookeeper
  namespace: wowsome
spec:
  authentication:
    jaasConfig:
      secretRef: credential
    type: digest
  configOverrides:
    log4j:
    - log4j.appender.stdout.layout.ConversionPattern={"level":"%p","timestamp":"%d{ISO8601}","thread":"%t","file":"%F","line":"%L","message":"%m","stacktrace":"%throwable{full}"}%n
    - log4j.logger.org.apache.zookeeper=INFO
    - log4j.logger.org.I0Itec.zkclient.ZkClient=INFO
    - log4j.rootLogger=WARN, stdout
  dataVolumeCapacity: 10Gi
  image:
    application: docker.io/confluentinc/cp-zookeeper:7.6.1
    init: docker.io/confluentinc/confluent-init-container:2.8.2
    pullSecretRef:
    - nexus
  license:
    secretRef: confluent-license
  logVolumeCapacity: 10Gi
  metrics:
    prometheus:
      rules:
      - labels:
          client_address: $4
          connection_id: $5
          member_type: $3
          server_id: $2
          server_name: $1
        name: zookeeper_connections_$6
        pattern: org.apache.ZooKeeperService<name0=(.+), name1=replica.(\d+), name2=(\w+),
          name3=Connections, name4=(.+), name5=(.+)><>([^:]+)
        valueFactor: "1"
      - labels:
          member_type: $3
          server_id: $2
          server_name: $1
        name: zookeeper_$4
        pattern: 'org.apache.ZooKeeperService<name0=(.+), name1=replica.(\d+), name2=(\w+)><>(\w+):
          (\d+)'
        valueFactor: "1"
      - labels:
          member_type: $3
          server_id: $2
          server_name: $1
        name: zookeeper_inmemorydatatree_$4
        pattern: 'org.apache.ZooKeeperService<name0=(.+), name1=replica.(\d+), name2=(\w+),
          name3=InMemoryDataTree><>(WatchCount|NodeCount): (\d+)'
        type: GAUGE
        valueFactor: "1"
      - labels:
          $3: $4
          server_id: $2
          server_name: $1
        name: zookeeper_status
        pattern: 'org.apache.ZooKeeperService<name0=(.+), name1=replica.(\d+)><>(.+):
          (.+)'
        type: UNTYPED
        value: "1"
        valueFactor: "1"
      - labels:
          server_id: $1
        name: zookeeper_status_$2
        pattern: 'org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+)><>(QuorumSize):
          (\d+)'
        type: GAUGE
        valueFactor: "1"
      - labels:
          server_id: "1"
          server_name: $1
        name: zookeeper_inmemorydatatree_$2
        pattern: 'org.apache.ZooKeeperService<name0=(.+), name1=InMemoryDataTree><>(WatchCount|NodeCount):
          (\d+)'
        type: GAUGE
        valueFactor: "1"
      - labels:
          client_address: $2
          connection_id: $3
          server_name: $1
        name: zookeeper_connections_$4
        pattern: org.apache.ZooKeeperService<name0=(.+), name1=Connections, name2=(.+),
          name3=(.+)><>([^:]+)
        valueFactor: "1"
      - labels:
          $2: $3
          server_name: $1
        name: zookeeper_$2
        pattern: 'org.apache.ZooKeeperService<name0=(.+)><>(StartTime|ClientPort|SecureClientAddress|Version|SecureClientPort):
          (.+)'
        value: "1"
        valueFactor: "1"
      - name: zookeeper_$2
        pattern: 'org.apache.ZooKeeperService<name0=(.+)><>(.+): (.+)'
        type: GAUGE
        valueFactor: "1"
      whitelist:
      - org.apache.ZooKeeperService:name3=Connections,*
      - org.apache.ZooKeeperService:name3=InMemoryDataTree,*
      - org.apache.ZooKeeperService:name0=*,name1=replica*,name2=*
      - org.apache.ZooKeeperService:name0=*,name1=replica*
      - org.apache.ZooKeeperService:name0=*
      - org.apache.ZooKeeperService:name1=InMemoryDataTree,name0=*
      - org.apache.ZooKeeperService:name0=*,name1=Connections,name2=*,name3=*
  oneReplicaPerNode: true
  replicas: 3
  storageClass:
    name: std-storages-rwo
  tls:
    secretRef: tls-kafka-internal
