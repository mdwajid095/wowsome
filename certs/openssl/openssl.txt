## Generate a CA pair to use:
  
1. Generate the private key for CA
openssl genrsa -out root-ca-key.pem 2048

2. Generate self-signed root CA  
openssl req -new -key root-ca-key.pem -x509 \
  -days 1000 \
  -out $TUTORIAL_HOME/root-ca.pem \
  -subj "/C=US/ST=CA/L=MountainView/O=Confluent/OU=Operator/CN=TestCA"
   
## Generate a Server key pair

1. Generate a private key for the server
openssl genrsa -out server-private-key.pem 2048

2. Create a CSR (Certificate Signing Request)
openssl req -new -key server-private-key.pem -out server-certificate.csr

3. Sign the CSR using the root CA
openssl x509 -req -in server-certificate.csr -CA root-ca.pem -CAkey root-ca-key.pem -CAcreateserial -out server-client-certificate.crt -sha256

# ===================================================================================
# create keystore and truststore in .p12

export APP_NAME=wow
openssl rand -base64 16 | cut -c -16 > ${APP_NAME}.password
 
keytool -keystore ${APP_NAME}-truststore.p12 \
  -storepass "$(< ${APP_NAME}.password)" \
  -alias ca -import -file root+subca.pem
 
 
openssl pkcs12 -export -inkey ${APP_NAME}.key \
  -name "${APP_NAME}" -in ${APP_NAME}-tef.pem \
  -chain -CAfile root+subca.pem \
# -certfile subca.pem \
  -passout pass:"$(< ${APP_NAME}.password)" \
  -out ${APP_NAME}-keystore.p12

# .p12 to .jks
keytool -importkeystore -srckeystore ${APP_NAME}-keystore.p12 -srcstoretype pkcs12 -srcstorepass "$(< ${APP_NAME}.password)" -srcalias ${APP_NAME} -destkeystore ${APP_NAME}-keystore.jks -deststoretype jks -deststorepass "$(< ${APP_NAME}.password)" -destalias ${APP_NAME}
 
keytool -keystore ${APP_NAME}-truststore.jks -storetype jks -storepass "$(< ${APP_NAME}.password)" -alias ca -import -file root+subca.pem
# ====================================================================================
# .p12 to .pem
openssl pkcs12 -in keystore.p12 -nocerts -nodes -out cert.key -password pass:mystorepassword
openssl pkcs12 -in keystore.p12 -nokeys -out cert.pem -password pass:mystorepassword
# ====================================================================================
# checking certificates
sudo keytool -v -list -storetype jks -keystore keystore.jks -storepass mystorepassword
sudo keytool -v -list -storetype pkcs12 -keystore keystore.p12

openssl pkcs12 -info -in keystore.p12 -password pass:mystorepassword
